TODO in some order.  Will happen sooner = more towards the top.

* Repeating groups

* Better handling of components.  24k lines of records is just crazy!

* Generate the .app file automatically.  Thus adding the fix*.erl
  files to it based on the available xml-files.

* Handling of encrypted messages

* Proper testing of checksum.  Since I test a checksum I generated
  myself it's not really that much of a test.  Trivial to test as soon
  as the fix parser is hooked up with a port listener.  Then the
  Quicktest test suite can generate checksums for me to test.

* Handle all types. Handles all types that are in the test files from
  QuickFIX.  It is trivial to add more as soon as I have a test
  message with a particular type.  Out of scope for #spawnfest

* Proper error handling for types.  They should throw and not crash.
  This is currently the only part of the system that fails without
  throwing.

* Handling of Multiplestringvalue, Multiplevaluestring, and
  Multiplecharvalue for enumerated types.

* Checking of BodyLength

* Give error when field is present more than once.

* The DATA type should be handled.


THING THAT ARE OUT OF SCOPE:

Most of these are out of scope since they need some sort of
(semi-)permanent storage.  The parser is an over-approximation of the
full FIX protocol.

* Checking of sequence numbers

* Checking user credentials

* Handling of ApplVerId.  I.e. message version wrapped in the fix
  transport layer.

* Transport layer/Message layer for FIXT1.1/FIX5.0(sp?).  Not doable
  without persistent storage.  At least session storage since it is
  set during the logon messag.

