This file is a diary of my progress.

Times are given in GMT, I'm currently in La Paz, Bolivia, which is
GMT-4. So the competition started at a nice eight o'clock in the
evening.

Sitting in the bar of the hostel where I live.

I realise that I have a lot of functions that could use an accumulator
and be tail recursive.  They run in constant time so I can't be
bothered.  I.e. it's only the code generator that has that type of
code, and the XML files are a known constant size.

2011-07-09 00:00

Creating directory structury.

Copy of basic build structur from another project.

Adding lots of .gitignore files.

Copying xml files from quickfix code. Running 'for a in FIX*; do mv $a
$(echo $a | tr A-Z a-z); done' to make the files lowercas.

I know that I should probably add a COPYRIGHT file related to these
files, but that will have to be handled later. (QuickFIX has a very
lax license; don't worry.)

00:24

Cheese burger ordered.

Adding a fix_generate.erl stub file.

Adding Rules.mk for priv directory.  Which will eventually create one
fix parser file for each xml file.  I realise while I have done
autogenerated things in Makefiles before they have only been a single
file thus filenames have been hard coded.

Once again learning to use .SECONDEXPANSION the limitations it has.  I
never again want to write a dependency like $(d)/$$(basename
$$(@F)).xml or generate a file named $(@D)/../src/$(basename
$(@F)).erl

Still not sure whether the generating Rules.mk file should be in the
priv directory or the src directory.

Build broken.

01:04

Really realising that I've never used xmerl before.  Code looks ugly
as hell.

01:15

Stupid make dependencies.

Apparently the Rules.mk file should go in the src directory.

01:43

Commiting a code generator that generate files that compile. YAY!

Milestone 1 reached.

Second half of Peru vs. Mexico in Copa America is about to start.

Starting to write a test script.

03:00

Have a decent test script up and running.

People at the bar are very happy.  So am I, if for a completely
different reason. (Local time is 23:00)

Writing more fix_generate stuff.  Not really doing any progress.  This
has to change.

04:43

Headers can now be parsed in theory.  But only if they are
typeless. :-)

05:20

Dancefloor next to computer managed to grab my attention.

06:10

Back to laptop, with a quick solution to earlier problem.  How great
it is to take a break sometimes.

First full message has been parsed.  Yay!  Happy time!  I would
celebrate with a beer, except I just drank a Vodka-Coke.

07:08

Heading for bed.  (Local time is 03:08)

14:51

Computer up and running.  Eating breakfast.

Downloading specifications from the FIX webpage.  The definition of
data types change over versions.

16:43

The more I read my code the more I think that xmerl must have
functionality for what I do with list comprehension.  I wonder if that
would look as ugly, worse, or better.

Working on handling body parsing.  And enum handling.

The more I write the more I understand why I did not want to write
this in XSLT.  It's bad enough in Erlang.  :-)

17:32

Yay!  Code builds again.

Next step is to do some cleanup befor continuing.

18:58

Basice cleanup done.  Code starts to be readable.

Working furnther on creating a parser for the trailer. Three lines of
code.  I love code reuse.  That's why the cleanup was good.

20:39

Unfortunately I've done some assumptions on typing which was a bit
bad.  Fixed but doesn't work for FIXT.  The reason is that FIXT has
the header/trailer defined in the fixt xml file while the message body
is in fixt50*.xml.

Crap.

Other problem is that I'm currently only matching enums which are
strings.  Need to look at the type when I generate the code.

20:42

Food.

24:00

Half time.

I've done something stupid with my makefile.  It builds too much.  I
guess it's better than the other way around.  Mark that as won't fix.

Working on building a bunch of Erlang records so that I can return
records instead of ugly Key, Value pairs.

YAY!  Found why my makefile was playing havoc on me when adding
generation of hrl files.  My autogenerated files dependend on .d files
(which are autogenerated things related to Erlang dependencies), and
to be able to create the .d file we first need to create the .erl file
of course.  Stupid.  Fixed.

